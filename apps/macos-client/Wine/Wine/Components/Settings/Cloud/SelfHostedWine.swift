//
//  SelfHostedWine.swift
//  Wine
//
//  Created by Alen Alex on 24/06/25.
//

import SwiftUI
import FactoryKit

public struct SelfHostedWine: View {
    
    @StateObject private var selfhostedWineViewModel : SelfHostedWineViewModel = SelfHostedWineViewModel()
    @State private var showingAlertForTest : Bool = false;
    @State private var alertMessageForTest : String? = "";
    @State private var showingAlertForSave : Bool = false;
    @State private var alertMessageForSave : String? = "";
    
    let settingsService : SettingsService = Container.shared.settingsService.resolve()
    var apiUploadService: FileUploadApiService = Container.shared.fileUploadApi.resolve()

    public var body: some View {
        VStack {
            SettingsGroup {
                HStack {
                    Image(systemName: "opticaldisc")
                    VStack(alignment: .leading) {
                        Text("Server address").fontWeight(.medium)
                        Text("Valid HTTP(s) url to connect to the self hosted wine server").font(.callout).foregroundColor(.secondary)
                    }
                    Spacer()
                    TextField("https://wine.example.com", text: $selfhostedWineViewModel.serverAddressString)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .border(selfhostedWineViewModel.lastServerAddressErrorMessage != nil ? Color.red : Color.clear, width: 1)
                        
                }
                
                Divider()
                HStack {
                    Spacer()
                    Text(self.selfhostedWineViewModel.lastServerAddressErrorMessage ?? "The server address is used to connect to the Wine server.")
                }.padding(.top, 4)
            }
            
            SettingsGroup {
                HStack {
                    Image(systemName: "key.fill")
                    VStack(alignment: .leading) {
                        Text("Secure token").fontWeight(.medium)
                        Text("A valid token generated by the self hosted wine instance").font(.callout).foregroundColor(.secondary)
                    }
                    Spacer()
                    SecureField("Secure token", text: $selfhostedWineViewModel.secureToken)
                }
                
                Divider()
                HStack {
                    Spacer()
                    Text("The access token to access the server.")
                }.padding(.top, 4)
            }
            
            Section {
                HStack(alignment: .center, spacing: 20) {
                    Button(action: {
                        Task {
                            alertMessageForTest = await selfhostedWineViewModel.testConnection()
                            showingAlertForTest = true
                        }
                    }, label: {
                        Text("Test").fontWeight(.medium)
                    })
                    .alert(Text(alertMessageForTest != nil ? "Failed to connect to the server" : "Connection success"), isPresented: $showingAlertForTest, actions: {
                        Button("Ok") {
                            showingAlertForTest.toggle()
                        }
                    }, message: {
                        Text(alertMessageForTest ?? "Connection success")
                    })
                    
                    Button(action: {
                        alertMessageForSave = selfhostedWineViewModel.saveSettings()
                        showingAlertForSave = true
                    }, label: {
                        Text("Save").fontWeight(.medium)
                    }).alert(Text(alertMessageForSave != nil ? "Failed to save settings" : "Settings saved"), isPresented: $showingAlertForSave, actions: {
                        Button("Ok") {
                            showingAlertForSave.toggle()
                        }
                    }, message: {
                        Text(alertMessageForSave ?? "Save success")
                    }).disabled(!selfhostedWineViewModel.canSave)
                }
            }.padding(.top, 10)
        }
    }
    
    
}
